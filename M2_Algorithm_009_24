function M2_Algorithm_009_24
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 % ENGR 132 
 % Program Description
 % This program will read a large data set of test data for different
 % concentrations and calculate the initial velocity for each concentration.
 %
 % Function Call
 % M2_Algorithm_009_24
 %
 % Input Arguments
 % None
 %
 % Output Arguments
 % None
 %
 % Assignment Information
 %   Assignment:     M2, Problem 1
 %   Team members:   Sofia Loucks, louckss@purdue.edu
 %                   Allison Womer, awomer@purdue.edu
 %                   Einar Pederson, ecpeders@purdue.edu
 %                   Katherine Sarafin, ksarafin@purdue.edu
 %   Team ID:        009-24
 %   Academic Integrity:
 %     [] We worked with one or more peers but our collaboration
 %        maintained academic integrity.
 %     Peers we worked with: 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 %% ____________________
 %% INITIALIZATION
 
 vNaughts = zeros(5,10); % Create empty matrix for all 10 vnaught values.
 start = 2; % First column with test data.
 row = 1;
 slopes = zeros(1,50); % Create empty matrix for 50 slopes to average.

 % Import data from file.
 all_data = readmatrix('Data_nextGen_KEtesting_allresults.csv');
 
 time = all_data(3:end,1);
 concentration = [3.75, 7.5, 15, 30, 65, 125, 250, 500, 1000, 2000];
 vmax = zeros(1,5);
 km = zeros(1,5);
 
 %% ____________________
 %% CALCULATIONS
% Loop through each enzyme type.

for e = 2:20:82
    start = e; % First column with test data.
    
    % Loop through each test concentration.
    for j = 1:1:10
    
        % Separate desired test concentration from full matrix.
        original_data = all_data((3:end), start);
        duplicate_data = all_data((3:end), start + 10);
    
        % Smooth the data before processing.
        original_smooth = smooth(original_data(:));
        duplicate_smooth = smooth(duplicate_data(:));
    
        % Find the slopes of the first 10 sets of points for each test and average them
        for s = 1:1:50
        
            slope_original = (original_smooth(s+1) - original_smooth(s))/(time(s+1) - time(s));
            slope_duplicate = (duplicate_smooth(s+1) - duplicate_smooth(s))/(time(s+1) - time(s));
    
            slopes(s) = (slope_original + slope_duplicate)/2;
        
        end
    
        % Assign to values vector.
        vNaughts(row, j) = (mean(slopes));
    
        start = start + 1;
        
    end
    
 % Adjust values for lineweaver burk plot.
 xAxis = 1./concentration;
 yAxis = 1./vNaughts(row,:);
  
 % Create model.
 coeffs = polyfit(xAxis, yAxis, 1);
 m = coeffs(1);
 b = coeffs(2);
 vmax(row) = 1/b;
 km(row) = m*vmax(row);

 row = row + 1;

end

 %% ____________________
 %% FORMATTED TEXT/FIGURE DISPLAYS

% Display results to the command window.
fprintf("Enzyme A: \n");
fprintf("Vnaught Values [uM/s]: ");
fprintf("%.4f  ", vNaughts(1,:));
fprintf("\n");
fprintf("Vmax [uM/s]: %.2f\n", vmax(1));
fprintf("Km [uM]: %.2f\n\n", km(1));

fprintf("Enzyme B: \n");
fprintf("Vnaught Values [uM/s]: ");
fprintf("%.4f  ", vNaughts(2,:));
fprintf("\n");
fprintf("Vmax [uM/s]: %.2f\n", vmax(2));
fprintf("Km [uM]: %.2f\n\n", km(2));

fprintf("Enzyme C: \n");
fprintf("Vnaught Values [uM/s]: ");
fprintf("%.4f  ", vNaughts(3,:));
fprintf("\n");
fprintf("Vmax [uM/s]: %.2f\n", vmax(3));
fprintf("Km [uM]: %.2f\n\n", km(3));

fprintf("Enzyme D: \n");
fprintf("Vnaught Values [uM/s]: ");
fprintf("%.4f  ", vNaughts(4,:));
fprintf("\n");
fprintf("Vmax [uM/s]: %.2f\n", vmax(4));
fprintf("Km [uM]: %.2f\n\n", km(4));

fprintf("Enzyme E: \n");
fprintf("Vnaught Values [uM/s]: ");
fprintf("%.4f  ", vNaughts(5,:));
fprintf("\n");
fprintf("Vmax [uM/s]: %.2f\n", vmax(5));
fprintf("Km [uM]: %.2f\n\n", km(5));

end

 %% ____________________
 %% RESULTS

% Enzyme A: 
% Vnaught Values [uM/s]: 0.0217  0.0431  0.0789  0.1581  0.2734  0.4169  0.5865  0.7146  0.8340  0.8942  
% Vmax [uM/s]: 0.97
% Km [uM]: 163.97
% 
% Enzyme B: 
% Vnaught Values [uM/s]: 0.0093  0.0184  0.0363  0.0710  0.1343  0.2260  0.3597  0.5180  0.7030  0.7253  
% Vmax [uM/s]: 0.92
% Km [uM]: 368.03
% 
% Enzyme C: 
% Vnaught Values [uM/s]: 0.0226  0.0444  0.0856  0.1603  0.3007  0.4747  0.6880  0.8920  1.0284  1.1347  
% Vmax [uM/s]: 1.24
% Km [uM]: 202.04
% 
% Enzyme D: 
% Vnaught Values [uM/s]: 0.0196  0.0375  0.0734  0.1437  0.2832  0.4655  0.7305  1.0053  1.2612  1.4180  
% Vmax [uM/s]: 1.45
% Km [uM]: 274.92
% 
% Enzyme E: 
% Vnaught Values [uM/s]: 0.0329  0.0638  0.1249  0.2134  0.4309  0.6712  0.9696  1.2340  1.4169  1.5501  
% Vmax [uM/s]: 1.56
% Km [uM]: 174.51

 %% ____________________
 %% ACADEMIC INTEGRITY STATEMENT
 % We have not used source code obtained from any other unauthorized
 % source, either modified or unmodified. Neither have we provided
 % access to my code to another. The program we are submitting
 % is our own original work.
